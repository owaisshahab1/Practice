//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcPractice.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MvcPracticeEntities : DbContext
    {
        public MvcPracticeEntities()
            : base("name=MvcPracticeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Children1> Children1 { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<LoginDetail> LoginDetails { get; set; }
        public virtual DbSet<Parent> Parents { get; set; }
    
        public virtual int DELETE_SP(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_SP", userIdParameter);
        }
    
        public virtual int INSERT_SP(string username, string password, string firstName, string lastName)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_SP", usernameParameter, passwordParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int UPDATE_SP(Nullable<int> userId, string username, string password, string firstName, string lastName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_SP", userIdParameter, usernameParameter, passwordParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int usp_InserParent(string parentName, Nullable<int> parentNameId)
        {
            var parentNameParameter = parentName != null ?
                new ObjectParameter("ParentName", parentName) :
                new ObjectParameter("ParentName", typeof(string));
    
            var parentNameIdParameter = parentNameId.HasValue ?
                new ObjectParameter("ParentNameId", parentNameId) :
                new ObjectParameter("ParentNameId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InserParent", parentNameParameter, parentNameIdParameter);
        }
    
        public virtual int usp_InserParentWithChildren(string parentName, Nullable<int> parentNameId)
        {
            var parentNameParameter = parentName != null ?
                new ObjectParameter("ParentName", parentName) :
                new ObjectParameter("ParentName", typeof(string));
    
            var parentNameIdParameter = parentNameId.HasValue ?
                new ObjectParameter("ParentNameId", parentNameId) :
                new ObjectParameter("ParentNameId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InserParentWithChildren", parentNameParameter, parentNameIdParameter);
        }
    }
}
